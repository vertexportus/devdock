%{ for service_ref in targets.values() }%
%{ if ':' in service_ref }%
    %{ set split = service_ref.split(':') }%
    %{ set container = split[0]|get_container }%
%{ else }%
    %{ set container = service_ref|get_container }%
%{ endif }%
upstream internal_%= container.fullname =% {
    server      %= container.fullname =%:%= container.ports['http'].default =%;
}
%{ endfor }%

server {
    listen 80 default_server;
    listen [::]:80 default_server ipv6only=on;
#     listen 443 ssl http2 default_server;
#     listen [::]:443 ssl http2 default_server;
#     ssl_certificate /etc/ssl/certs/selfsigned.crt;
#     ssl_certificate_key /etc/ssl/private/selfsigned.key;

    server_name  serverName;

    %{ for target, service_ref in targets.items() }%
    %{ if ':' in service_ref }%
        %{ set split = service_ref.split(':') }%
        %{ set container = split[0]|get_container }%
        %{ set target_path = split[1] }%
    %{ else }%
        %{ set container = service_ref|get_container }%
        %{ set target_path = '/' }%
    %{ endif }%
    location /%= target if target != '/' else '' =% {
        proxy_pass      http://internal_%= container.fullname =%%= target_path =%;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    %{ endfor }%
}